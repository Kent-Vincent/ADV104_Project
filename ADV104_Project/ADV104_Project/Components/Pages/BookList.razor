@page "/books"
@using ADV104_Project.Entities
@inject ADV104_Project.Services.FetchBookService BookService
@inject ADV104_Project.Services.DeleteBookService DeleteBookService
@inject ADV104_Project.Services.AddBookService AddBookService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ADV104_Project.Data.DataContext DbContext
@rendermode InteractiveServer
@attribute [StreamRendering]


<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Arial', sans-serif;
        background: url('https://imgs.search.brave.com/z50aYH_O2jRtheNLW15kroy9f2aTS4SL1EL0XDhQhWE/rs:fit:860:0:0/g:ce/aHR0cHM6Ly9pbWFn/ZXMudW5zcGxhc2gu/Y29tL3Bob3RvLTE0/ODE2Mjc4MzQ4NzYt/Yjc4MzNlOGY1NTcw/P3E9ODAmdz0xMDAw/JmF1dG89Zm9ybWF0/JmZpdD1jcm9wJml4/bGliPXJiLTQuMC4z/Jml4aWQ9TTN3eE1q/QTNmREI4TUh4elpX/RnlZMmg4TW54OGJH/bGljbUZ5ZVh4bGJu/d3dmSHd3Zkh4OE1B/PT0') center/cover no-repeat;
        text-align: center;
    }
</style>

<h3>BOOK LIST</h3>

<div style="text-align: right;">
    <button class="create-book-button" @onclick="AddNewBook">Create Book</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Quantity</th>
            <th>Title</th>
            <th>Author</th>
            <th>Genre</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Books)
        {
            <tr>
                <td>@book.ID</td>
                <td>@book.Quantity</td>
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.Description</td>
                <td>
                    <button class="rent-button" @onclick="()=> Rentbook(book)">Rent</button>
                    <button class="edit-button" @onclick="() => EditBook(book.ID)">Edit</button>
                    <button class="delete-button" @onclick="() => DeleteBook(book.ID)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    List<Book> Books;

    protected override void OnInitialized()
    {
        Books = BookService.GetAllBooks();
    }

    public void AddNewBook()
    {
        NavigationManager.NavigateTo("/create-book");
    }

    public void EditBook(int bookId)
    {
        NavigationManager.NavigateTo($"/edit-book/{bookId}");
    }

    public async Task DeleteBook(int bookId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this book?");

        if (confirmDelete)
        {
            // Remove the book from the UI
            Books.RemoveAll(b => b.ID == bookId);

            // Remove the book from the database
            var bookToDelete = DbContext.Books.Find(bookId);
            if (bookToDelete != null)
            {
                DbContext.Books.Remove(bookToDelete);
                await DbContext.SaveChangesAsync();
            }
        }
    }

    public async Task Rentbook(Book book)
    {
        if (book != null && book.Quantity > 0)
        {
            book.Quantity -= 1;

            var rentedBook = new RentBook
                {
                    ID = book.ID,
                    Quantity = 1,
                    Title = book.Title,
                    Author = book.Author,
                    Description = book.Description,
                    ImageUrl = book.ImageUrl
                };
            DbContext.RentBooks.Add(rentedBook);

            await DbContext.SaveChangesAsync();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Book not available for rent.");
        }
    }
}